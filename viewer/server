#!/usr/bin/ruby1.8
#
#  Sinatra-server which allows a client to view the events submitted
# to the dashboard.
#
#  This is proof of concept, which means it works but it isn't "pretty".
#
#  Dependencies:
#
#   1.  RubyGems.
#   2.  The gems "redis" & "sinatra".
#
# Steve
# --
#


#
#  Copyright (c) 2013, Steve Kemp
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  3. All advertising materials mentioning features or use of this software
#     must display the following acknowledgement:
#       This product includes software developed by the Steve Kemp.
#
#  THIS SOFTWARE IS PROVIDED BY Steve Kemp ''AS IS'' AND ANY
#  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL Steve Kemp BE LIABLE FOR ANY
#  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#

require 'rubygems'
require 'redis'
require 'sinatra/base'
require 'json'


#
#  The application.
#
class DashboardViewer < Sinatra::Base


  #
  # Configurate Sinatra
  #
  configure do
    set :environment, :production
    set :public_folder, File.dirname( __FILE__ ) + "/public"
    set :sessions, false
    set :bind, 'localhost'
    set :port, 9999
  end



  #
  # The redis handle
  #
  attr_reader :storage



  #
  # Constructor
  #
  def initialize
    @storage = Redis.new()
  end


  #
  # Routing follows
  #



  #
  #  When folks hit the index show the index.html file from the
  # public/ subdirectory.
  #
  get '/' do
     send_file File.join(settings.public_folder, 'index.html')
  end


  #
  #  When the /events/ URL is called return an array of hashes, in
  # JSON format.
  #
  #  This is designed to be polled & displayed by the jQuery index page.
  #
  get '/events/?' do
     tmp = Array.new()

     @storage.lrange( "dashboard", 0, 100 ).each do |line|

       if ( line =~ /^([^#]+)#([^#]+)#(.*)$/ )
           h = {}
           h[:ip] = $1.dup
           h[:date] = $2.dup
           h[:msg]=$3.dup
           tmp << h
       end
     end
     tmp.to_json()
  end

end




#
# Launch the application
#
if __FILE__ == $0
  DashboardViewer.run!
end



